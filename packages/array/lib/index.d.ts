import butLast from './butLast';
import clear from './clear';
import concat from './concat';
import filter from './filter';
import filterNot from './filterNot';
import first from './first';
import flat from './flat';
import flatMap from './flatMap';
import get from './get';
import groupBy from './groupBy';
import has from './has';
import includes from './includes';
import insert from './insert';
import last from './last';
import map from './map';
import pop from './pop';
import push from './push';
import reduce from './reduce';
import reduceRight from './reduceRight';
import remove from './remove';
import rest from './rest';
import reverse from './reverse';
import set from './set';
import setSize from './setSize';
import shift from './shift';
import size from './size';
import sort from './sort';
import sortBy from './sortBy';
import unshift from './unshift';
import update from './update';
import zip from './zip';
import zipAll from './zipAll';
import zipWith from './zipWith';
export { butLast, clear, concat, filter, filterNot, first, flat, flatMap, get, groupBy, has, includes, insert, last, map, pop, push, reduce, reduceRight, remove, rest, reverse, set, setSize, shift, size, sort, sortBy, unshift, update, zip, zipAll, zipWith, };
declare const _default: {
    butLast: (arr: any[]) => any[];
    clear: (arr: any) => any[];
    concat: (value: any) => (arr: any[]) => any[];
    filter: (fn: (element: any, index: number, array: any[]) => boolean) => (arr: any[]) => any[];
    filterNot: (fn: (element: any, index: number, array: any[]) => boolean) => (arr: any[]) => any[];
    first: (arr: any[]) => any;
    flat: (depth?: number) => (arr: any[]) => any[];
    flatMap: (callback: (currentValue?: any, index?: number, array?: any[]) => any[]) => (arr: any[]) => any[];
    get: (index: number) => (arr: any[]) => any;
    groupBy: (groupingFn: (x: any) => any) => (arr: any[]) => Object;
    has: (index: number) => (arr: any[]) => boolean;
    includes: (element: any) => (arr: any[]) => boolean;
    insert: (index: any, value: any) => (arr: any) => any;
    last: (arr: any[]) => any;
    map: (fn: any) => (arr: any) => any;
    pop: (arr: any) => any;
    push: (value: any) => (arr: any) => any;
    reduce: (fn: any, initialValue: any) => (arr: any) => any;
    reduceRight: (fn: any, initialValue: any) => (arr: any) => any;
    remove: (index: any) => (arr: any) => any;
    rest: (arr: any[]) => any[];
    reverse: (arr: any) => any;
    set: (index: any, value: any) => (arr: any) => any[];
    setSize: (size: any) => (arr: any) => any;
    shift: (arr: any) => any;
    size: (arr: any) => any;
    sort: (fn?: (a: any, b: any) => number) => (arr: any[]) => any[];
    sortBy: (valueMapper: (element: any) => any) => (comparator?: (a: any, b: any) => number) => (arr: any[]) => any[];
    unshift: (value: any) => (arr: any) => any[];
    update: (updater: (value: any) => any) => (index: number, valueIdNotExists?: any) => (arr: any[]) => any[];
    zip: (otherArr: any[]) => (arr: any[]) => any[][];
    zipAll: (otherArr: any[]) => (arr: any[]) => any[][];
    zipWith: (fn: (a: any, b: any) => any) => (otherArr: any[]) => (arr: any[]) => any[];
};
export default _default;
